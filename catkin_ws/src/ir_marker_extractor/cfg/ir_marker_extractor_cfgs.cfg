#!/usr/bin/env python
PACKAGE = "ir_marker_extractor"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("high_threshold",    int_t,    0, "Image High Threshold", 255,  0, 255)
gen.add("low_threshold",     int_t,    0, "Image High Threshold", 100,  0, 255)
gen.add("max_white_pixels", int_t,    0, "Max Number of White Pixels", 300,  0, 3000)

gen.add("bsas_enable",      bool_t,    0, "BSAS Enable", False)
gen.add("max_clusters",     int_t,    0, "Max Number of Clusters", 8,  1, 20)
gen.add("clustering_threshold", int_t,    0, "Clustering Threshold",    20, 0,   255)

gen.add("blub_min_threshold",   int_t,    0, "Min Threshold for Blub Detection", 50,0,255)
gen.add("blub_max_threshold",   int_t,   0, "Max Threshold for Blub Detection", 255,0,255)
gen.add("blub_filterByArea",   bool_t,   0, "Filter by Area",  True)
gen.add("blub_minArea",   double_t,   0, "Min Area",  0,0,1000)
gen.add("blub_filterByCircularity",   bool_t,   0, "Filter by Circularity",  True)
gen.add("blub_minCircularity",   double_t,   0, "Min Circularity",  0.3,0.,1)
gen.add("blub_filterByConvexity",   bool_t,   0, "Filter By Convexity",  True)
gen.add("blub_minConvexity",   double_t,   0, "Min Convexity",  0.7,0.,1)
gen.add("blub_filterByInertia",   bool_t,   0, "Filter By Inertia",  True)
gen.add("blub_minInertiaRatio",   double_t,   0, "Min Inertia Ratio",  0.1,0.,1)
gen.add("blub_color",   int_t,   0, "Blub Color",  255,0,255)


#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                       gen.const("Medium",     int_t, 1, "A medium constant"),
#                       gen.const("Large",      int_t, 2, "A large constant"),
#                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                     "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "ir_marker_extractor", "ir_marker_extractor_cfgs"))
